interface CallbackFunction {
  (payload: { id: string; data: any }): void;
}

type KEY = string;
type TYPE = any;

let autogeneratedKey = 0;
const generateKey = () => {
  autogeneratedKey += 1;
  return String(autogeneratedKey);
};

/**
 * Manages the publish-subscribe pattern for a set of actions.
 */
export class PubSubManager {
  private subscriptions: {
    [key: string]: {
      key: KEY;
      callback: Awaited<CallbackFunction>;
    }[];
  } = {};

  /**
   * Unsubscribes a callback function from a specific action type.
   * @param actionType - The type of action to unsubscribe from.
   * @param key - The unique key identifying the subscription to be removed.
   */
  unSubscribe = (actionType: string, { key }: { key: string }) => {
    const subscribers = this.subscriptions[actionType];

    if (subscribers) {
      this.subscriptions[actionType] = subscribers.filter((subscriber) => subscriber.key !== key);
    }
  };

  /**
   * Subscribes a callback function to a specific action type.
   * @param actionType - The type of action to subscribe to.
   * @param callback - The callback function to be called when the action is published.
   * @returns A function to unsubscribe the callback from the action type.
   */
  subscribe = (actionType: TYPE, callback: CallbackFunction, key?: KEY) => {
    if (!this.subscriptions[actionType]) {
      this.subscriptions[actionType] = [];
    }

    const subscriptionKey = key ?? generateKey();

    this.subscriptions[actionType].push({
      key: subscriptionKey,
      callback,
    });

    // Return an unsubscribe function specific to this subscription
    return () => this.unSubscribe(actionType, { key: subscriptionKey });
  };

  /**
   * Publishes an action to all subscribers of the corresponding action type.
   * @param action - The action to publish.
   */
  publish(action: { type: TYPE; payload: any }) {
      const subscribers = this.subscriptions[action.type];

      if (subscribers) {
        subscribers.forEach((subscriber) => subscriber.callback(action.payload));
      }
    }
}
// Create an instance of PubSubManager for use
const pubsubManager = new PubSubManager();

export default pubsubManager;
